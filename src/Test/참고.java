package Test;

public class 참고 {

	public static void main(String[] args) {
		/*
		 상속
		 상위클래스의 속성/기능을 하위클래스가 그대로 받아서 사용할 수 있도록 허용한 문법
		 Why?
		 1 확장성 2 유지보수 3가독성
		 
		 오버라이딩 vs 오버로딩
		 오버라이딩: 상속관계를 전제하여 상위클래스의 메서드를 하위클래스가 고쳐서(재정의)사용할 수 있도록 허용한 문법
		 오버로딩 : 함수명을 동일하게 두고 매개변수를 다양하게 적용할수 있도록 허용한 문법
		 
		 업캐스팅
		 상위클래스 참조변수 = 하위객체
		 상속관계를 전제로 하여 하위클래스가 다를 수 있는 모든 객체를 연할 수 있는 참조변수로 사용
		 자동클래스 형변환
		 상위클래스의 멤버 접근 O
		 하위클래스의 확장 멤버 접근 X
		 하위클래스의 오버라이딩된 멤버 접근 O
		 
		 다운캐스팅
		 업캐스팅된 상테에서 확장된 멤버에 접근하기 위해 클래스자료형변환을 하는 문법
		 강제클래스 형변환
		 
		 추상클래스
		 추상메서드(미완성된 함수)를 하나이상 포함하고 있는 클래스
		 일반매서드 선언 가능
		 일반멤버변수 선언 가능
		 추상클래스로는 객체 생성 불가능
		 참조변수에 연결되는 객체 하위클래스형으로 만든 객체(업캐스팅)
		 하위클래스의 오버라딩된 멤버 접근 O
		 
		 인터페이스
		 멤버변수 : final static (공유 상수)
		 멤버함수 : 추상메서드(->상속받는 클래스가 완성시켜라)
		 일반메서드 x
		 일반멤버변수 x
		 1) 낮은 결합도
		 2) 
		 
		 */

	}

}
